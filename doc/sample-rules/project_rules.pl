% ===== BEGIN CLAUDE-GENERATED CONTENT =====
% Generated by Claude (Anthropic) on 2024-12-20
% Purpose: Project Development Rules and Standards in Prolog
% Version: Initial generation
% Modifications: None

% Project Development Rules and Justifications
% This document defines project development rules using Prolog syntax
% Each rule is accompanied by its justification and severity level

% Rule predicate structure:
% rule(ID, Description, Justification, Severity, Category).

% Severity levels:
% - critical    : Must be followed, no exceptions
% - major      : Should be followed, exceptions need approval
% - minor      : Recommended practice
% - suggestion : Best practice

% Categories:
% - security   : Security-related rules
% - build      : Build system rules
% - code       : Code quality rules
% - deployment : Deployment-related rules
% - testing    : Testing-related rules

% Security Rules
rule(sec001,
    'Do not store credentials in source code',
    'Prevents credential leaks and improves security by separating sensitive data from code',
    critical,
    security).

rule(sec002,
    'Do not include external symlinks',
    'Would contribute to making the system unreleasable and poses security risks',
    major,
    security).

% Build Rules
rule(build001,
    'Use explicit version numbers for dependencies',
    'Ensures build reproducibility and prevents unexpected breaking changes',
    major,
    build).

rule(build002,
    'All build scripts must be idempotent',
    'Enables reliable builds and prevents inconsistent build states',
    critical,
    build).

% Code Quality Rules
rule(code001,
    'Functions must not exceed 50 lines',
    'Improves code readability and maintainability by enforcing single responsibility principle',
    major,
    code).

rule(code002,
    'All public APIs must have documentation',
    'Facilitates code understanding and proper usage by other developers',
    critical,
    code).

% Deployment Rules
rule(deploy001,
    'All configuration must be environment-variable based',
    'Enables proper twelve-factor app compliance and simplifies deployment across environments',
    critical,
    deployment).

rule(deploy002,
    'Services must include health check endpoints',
    'Enables automated monitoring and proper container orchestration',
    major,
    deployment).

% Testing Rules
rule(test001,
    'All public APIs must have unit tests',
    'Ensures code reliability and prevents regression issues',
    critical,
    testing).

rule(test002,
    'Integration tests must not depend on external services',
    'Ensures tests can run reliably in any environment',
    major,
    testing).

% Query Examples:
% Find all critical rules:
% ?- rule(ID, Description, _, critical, _).

% Find rules by category:
% ?- rule(ID, Description, _, _, security).

% Find all major security rules:
% ?- rule(ID, Description, _, major, security).

% Additional Helper Predicates

% Check if a rule is critical
is_critical_rule(ID) :-
    rule(ID, _, _, critical, _).

% Get all rules in a category
category_rules(Category, ID, Description) :-
    rule(ID, Description, _, _, Category).

% Get rules by severity
severity_rules(Severity, ID, Description) :-
    rule(ID, Description, _, Severity, _).

% Validation rules
valid_severity(Severity) :-
    member(Severity, [critical, major, minor, suggestion]).

valid_category(Category) :-
    member(Category, [security, build, code, deployment, testing]).

% LLM Attribution Rules
rule(llm001,
    'All LLM-generated content must be clearly attributed',
    'Ensures transparency and proper attribution of AI-generated content',
    critical,
    code).

rule(llm002,
    'Use standardized attribution blocks for LLM-generated content',
    'Maintains consistency and clarity in identifying AI-generated portions',
    major,
    code).

rule(llm003,
    'LLM attribution must include generation date and version',
    'Enables tracking of AI-generated content versions and modifications',
    major,
    code).

% Example usage:
% Get all critical security rules:
% ?- rule(ID, Desc, _, critical, security).
% 
% Get all rules for a specific category:
% ?- category_rules(security, ID, Description).
%
% Check if a rule is critical:
% ?- is_critical_rule(sec001).

% ===== END CLAUDE-GENERATED CONTENT =====
